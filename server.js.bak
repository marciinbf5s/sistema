require('dotenv').config();
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const session = require('express-session');
const http = require('http');
const { connectToDatabase, prisma } = require('./database/connect');

// Importação das rotas
const authRoutes = require('./routes/auth.routes');
const appointmentRoutes = require('./routes/appointment.routes');
const clientRoutes = require('./routes/client.routes');
const serviceRoutes = require('./routes/service.routes');
const userRoutes = require('./routes/user.routes');
const dashboardRoutes = require('./routes/dashboard.routes');
const procedimentoRoutes = require('./routes/procedimento.routes');
const convenioRoutes = require('./routes/convenio.routes');
const professionalRoutes = require('./routes/professional.routes');

// Inicializa o aplicativo Express
const app = express();

// Middlewares
const allowedOrigins = [
    'http://127.0.0.1:5500',
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://localhost',
    'http://127.0.0.1'
];

// Configuração CORS para requisições com credenciais
app.use((req, res, next) => {
    const origin = req.headers.origin;
    
    // Verifica se a origem está na lista de permitidas
    if (allowedOrigins.includes(origin)) {
        res.setHeader('Access-Control-Allow-Origin', origin);
    }
    
    res.header('Access-Control-Allow-Credentials', 'true');
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
    
    // Responde imediatamente para requisições OPTIONS (preflight)
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    next();
});

// Configuração CORS
const corsOptions = {
    origin: function (origin, callback) {
        // Permite requisições sem origem (como mobile, curl, etc)
        if (!origin) return callback(null, true);
        
        // Lista de origens permitidas
        const allowedOrigins = [
            'http://localhost:3000',
            'http://127.0.0.1:3000',
            'http://localhost:8000',
            'http://127.0.0.1:8000',
            'http://localhost',
            'http://127.0.0.1'
        ];
        
        if (allowedOrigins.includes(origin) || !origin) {
            callback(null, true);
        } else {
            callback(new Error('Not allowed by CORS'));
        }
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    exposedHeaders: ['Content-Range', 'X-Content-Range']
};

// Aplica o CORS
app.use(cors(corsOptions));

// Middleware para log de requisições
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`, {
        headers: req.headers,
        body: req.body
    });
    next();
});

// Configuração do body-parser antes das rotas
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

// Middleware para log de requisições
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});
app.use(cookieParser());

// Configuração de sessão
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: process.env.NODE_ENV === 'production',
        httpOnly: true,
        maxAge: 24 * 60 * 60 * 1000 // 24 hours
    }
}));

// Conecta ao banco de dados
connectToDatabase()
    .then(() => console.log('✅ Database connection established'))
    .catch(err => console.error('❌ Database connection error:', err));

// Configuração para servir arquivos estáticos
const path = require('path');
app.use(express.static(path.join(__dirname, 'public')));

// Rota raiz - redireciona para o dashboard
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'dashboard.html'));
});

// Rota para a página de clientes
app.get('/clientes', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'clientes.html'));
});

// Rota para a página de serviços
app.get('/servicos', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'servicos.html'));
});

// Rota para a página de procedimentos
app.get('/procedimentos', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'procedimentos.html'));
});

// API Routes
app.use('/api/professionals', professionalRoutes);

// Middleware de log para depuração
app.use((req, res, next) => {
    console.log('Headers:', req.headers);
    console.log('Body:', req.body);
    next();
});

// Configuração das rotas
app.use('/api/auth', authRoutes);
app.use('/api/appointments', appointmentRoutes);
app.use('/api/clients', clientRoutes);
app.use('/api/services', serviceRoutes);
app.use('/api/users', userRoutes);
app.use('/api/dashboard', dashboardRoutes);

// Rotas para procedimentos, convênios e profissionais
app.use('/api/procedimentos', procedimentoRoutes);
app.use('/api/convenios', convenioRoutes);
app.use('/api/profissionais', professionalRoutes);

// Endpoint de verificação de saúde
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});
// Middleware de tratamento de erros
app.use((err, req, res, next) => {
    console.error('❌ Error:', err);
    res.status(500).json({
        error: 'Internal Server Error',
        message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',
        ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
    });
});

// Manipulador de rotas não encontradas (404)
app.use((req, res) => {
    res.status(404).json({ error: 'Not Found' });
});

// Configuração do servidor
const port = process.env.PORT || 3001;
app.set('port', port);

// Cria o servidor HTTP
const server = http.createServer(app);

// Ouvinte de eventos para erros do servidor HTTP
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // Trata erros específicos de inicialização com mensagens amigáveis
  switch (error.code) {
    case 'EACCES':
      console.error(`❌ ${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`❌ ${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

// Ouvinte de eventos para quando o servidor inicia a escuta
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`🚀 Server running on ${bind}`);
  console.log(`🌐 Environment: ${process.env.NODE_ENV || 'development'}`);
};

// Inicia o servidor
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Desligamento gracioso
const shutdown = async () => {
  console.log('\n🛑 Received shutdown signal, closing server...');
  
  try {
    // Fecha o cliente do Prisma
    await prisma.$disconnect();
    console.log('✅ Prisma client disconnected');
    
    // Fecha o servidor
    server.close(() => {
      console.log('✅ HTTP server closed');
      process.exit(0);
    });
    
    // Força o fechamento do servidor após 5 segundos
    setTimeout(() => {
      console.error('❌ Could not close connections in time, forcing shutdown');
      process.exit(1);
    }, 5000);
    
  } catch (error) {
    console.error('❌ Error during shutdown:', error);
    process.exit(1);
  }
};

// Escuta por sinais de desligamento
process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);

// Trata exceções não capturadas
process.on('uncaughtException', (error) => {
  console.error('❌ Uncaught Exception:', error);
  shutdown();
});

// Trata rejeições de promessas não tratadas
process.on('unhandledRejection', (reason, promise) => {
  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason);
  // Considere se deve desligar o servidor aqui
  // shutdown();
});

module.exports = { app, server };
